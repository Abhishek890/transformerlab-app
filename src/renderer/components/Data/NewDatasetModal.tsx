import React, { useEffect, useState } from 'react';
import useSWR from 'swr';
import {
  Button,
  Divider,
  Input,
  Modal,
  ModalClose,
  ModalDialog,
  Sheet,
  Typography,
  Box,
  CircularProgress,
  Select,
  Option,
} from '@mui/joy';
import { PlusCircleIcon } from 'lucide-react';
import Dropzone from 'react-dropzone';
import { IoCloudUploadOutline } from 'react-icons/io5';
import * as chatAPI from '../../lib/transformerlab-api-sdk';

const fetcher = (url) => fetch(url).then((res) => res.json());

export default function DatasetDetailsModal({ open, setOpen }) {
  const [newDatasetName, setNewDatasetName] = useState('');
  const [datasetType, setDatasetType] = useState('text');
  const [showUploadDialog, setShowUploadDialog] = useState(false);
  const [uploading, setUploading] = useState(false);
  const [dropzoneActive, setDropzoneActive] = useState(false);

  const swrKey = open ? chatAPI.Endpoints.Dataset.LocalList(false) : null;
  const { data, isLoading, mutate } = useSWR(swrKey, fetcher);

  const handleClose = () => {
    setOpen(false);
    setShowUploadDialog(false);
    setNewDatasetName('');
    mutate();
  };

  const uploadFiles = async (formData) => {
    setUploading(true);
    const response = await fetch(
      chatAPI.Endpoints.Dataset.Create(newDatasetName),
    );
    const data = await response.json();
    if (data.status === 'error') {
      alert(data.message);
    } else {
      await fetch(chatAPI.Endpoints.Dataset.FileUpload(newDatasetName), {
        method: 'POST',
        body: formData,
      });
    }
    setUploading(false);
    handleClose();
  };

  const validateFiles = (files) => {
    const allowedExtensions = [
      '.json',
      '.jsonl',
      '.csv',
      '.zip',
      '.jpg',
      '.jpeg',
      '.png',
      'tiff',
      'webp',
    ];
    const isValid = (file) =>
      allowedExtensions.some((ext) => file.name.toLowerCase().endsWith(ext));
    const invalidFiles = files.filter((f) => !isValid(f));
    return invalidFiles;
  };

  const previewSample = (file) => {
    const reader = new FileReader();
    reader.onload = () => {
      const content = reader.result;
      try {
        const preview = file.name.endsWith('.jsonl')
          ? JSON.parse(content.split('\n')[0])
          : JSON.parse(content);
        console.log('Preview sample:', preview);
      } catch (e) {
        console.error('Invalid JSON preview:', e);
      }
    };
    reader.readAsText(file);
  };

  const maybeAddGeneratedMetadata = (files, formData) => {
    const hasMetadata = files.some((f) =>
      ['.json', '.jsonl', '.csv'].some((ext) =>
        f.name.toLowerCase().endsWith(ext),
      ),
    );
    if (!hasMetadata) {
      const imageFiles = files.filter(
        (f) =>
          f.type.startsWith('image/') ||
          ['.jpg', '.jpeg', '.png', '.webp', '.tiff'].some((ext) =>
            f.name.toLowerCase().endsWith(ext),
          ),
      );
      const jsonl = imageFiles
        .map((f) => JSON.stringify({ image: f.name, text: '' }))
        .join('\n');
      const blob = new Blob([jsonl], { type: 'application/jsonl' });
      const file = new File([blob], 'autogenerated_metadata.jsonl');
      formData.append('files', file);
    }
  };

  return (
    <>
      <Modal open={open} onClose={handleClose}>
        <ModalDialog>
          <ModalClose />
          <Typography level="title-lg">
            {newDatasetName || 'New'} Dataset
          </Typography>
          <Divider sx={{ my: 1 }} />
          <Sheet sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
            {newDatasetName === '' && (
              <form
                style={{
                  display: 'flex',
                  flexDirection: 'column',
                  gap: '10px',
                }}
                onSubmit={(e) => {
                  e.preventDefault();
                  const name = e.currentTarget.elements['dataset-name']?.value;
                  if (data.map((item) => item.dataset_id).includes(name)) {
                    alert('Dataset name already exists.');
                    return;
                  }
                  setNewDatasetName(name);
                  setShowUploadDialog(true);
                  setOpen(false);
                }}
              >
                <Input
                  placeholder="Dataset Name"
                  name="dataset-name"
                  required
                />
                <Select
                  value={datasetType}
                  onChange={(e, newVal) => setDatasetType(newVal)}
                  required
                >
                  <Option value="text">Text</Option>
                  <Option value="image">Image</Option>
                </Select>
                <Button type="submit" disabled={isLoading}>
                  {isLoading ? <CircularProgress /> : 'Next'}
                </Button>
              </form>
            )}
          </Sheet>
        </ModalDialog>
      </Modal>

      <Modal open={showUploadDialog} onClose={handleClose}>
        <ModalDialog>
          <ModalClose />
          <Typography level="title-lg">Upload {datasetType} Dataset</Typography>
          <Divider sx={{ my: 2 }} />
          <Box
            sx={{
              display: 'flex',
              flexDirection: 'column',
              gap: 2,
              width: '25vw',
            }}
          >
            {datasetType === 'image' && (
              <Typography level="body-sm" color="neutral">
                Supported formats: image folder (.zip), JSON (.json) or JSONL
                (.jsonl) as in Hugging Face image datasets
              </Typography>
            )}
            {datasetType === 'text' && (
              <Typography level="body-sm" color="neutral">
                Supported formats: JSON (.json) or JSONL (.jsonl)
              </Typography>
            )}
            <Dropzone
              onDrop={async (acceptedFiles) => {
                setDropzoneActive(false);
                const invalidFiles = validateFiles(acceptedFiles);
                if (invalidFiles.length > 0) {
                  alert(
                    `Unsupported file types: ${invalidFiles.map((f) => f.name).join(', ')}`,
                  );
                  return;
                }
                if (
                  acceptedFiles.length > 0 &&
                  ['.json', '.jsonl'].some((ext) =>
                    acceptedFiles[0].name.endsWith(ext),
                  )
                ) {
                  previewSample(acceptedFiles[0]);
                }
                const formData = new FormData();
                acceptedFiles.forEach((file) => formData.append('files', file));
                maybeAddGeneratedMetadata(acceptedFiles, formData);
                await uploadFiles(formData);
              }}
              onDragEnter={() => setDropzoneActive(true)}
              onDragLeave={() => setDropzoneActive(false)}
              noClick
            >
              {({ getRootProps, getInputProps }) => (
                <div {...getRootProps()}>
                  <Sheet
                    color="primary"
                    variant="soft"
                    sx={{
                      display: 'flex',
                      flexDirection: 'column',
                      minHeight: '130px',
                      border: dropzoneActive
                        ? '2px solid orange'
                        : '2px dashed grey',
                      borderRadius: '8px',
                      justifyContent: 'center',
                      alignItems: 'center',
                    }}
                  >
                    <IoCloudUploadOutline size="36px" /> Drag & drop files here
                    <Typography level="body-xs" mt={2}>
                      Or use the button below
                    </Typography>
                  </Sheet>
                </div>
              )}
            </Dropzone>
            <Button
              startDecorator={<PlusCircleIcon />}
              onClick={() => {
                const input = document.createElement('input');
                input.type = 'file';
                input.multiple = true;
                input.onchange = async (e) => {
                  const files = Array.from(input.files);
                  const invalidFiles = validateFiles(files);
                  if (invalidFiles.length > 0) {
                    alert(
                      `Unsupported file types: ${invalidFiles.map((f) => f.name).join(', ')}`,
                    );
                    return;
                  }
                  if (
                    files.length > 0 &&
                    ['.json', '.jsonl'].some((ext) =>
                      files[0].name.endsWith(ext),
                    )
                  ) {
                    previewSample(files[0]);
                  }
                  const formData = new FormData();
                  files.forEach((file) => formData.append('files', file));
                  await uploadFiles(formData);
                };
                input.click();
              }}
              disabled={uploading}
            >
              {uploading ? <CircularProgress /> : 'Browse files'}
            </Button>
          </Box>
        </ModalDialog>
      </Modal>
    </>
  );
}
